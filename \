package main

import (
	"fmt"
	"github.com/goccy/go-yaml"
	"github.com/moovweb/rubex"
	"os"
	"strings"
)

var configfile = "vars.yml"

type Config struct {
	DNA          string `yaml:"dna"`
	DNARNA       string `yaml:"dnarna"`
	Rcom         string `yaml:"rcom"`
	Gcstrand     string `yaml:"gcstrand"`
	Gcstrands    string `yaml:"gcstrands"`
	Subtosearch  string `yaml:"subtosearch"`
	Tosearch     string `yaml:"tosearch"`
	HammingPair  string `yaml:"hamming_pair"`
	DNAToProtein string `yaml:"dnatoprotein"`
}

func readCfgFile(cfg *Config) {
	// Mostly lifted from https://dev.to/ilyakaznacheev/a-clean-way-to-pass-configs-in-a-go-application-1g64
	// Converted to use go-yaml instead of yaml2
	f, err := os.Open(configfile)
	if err != nil {
		fmt.Println(err)
		panic(err)
	}
	defer f.Close()
	decoder := yaml.NewDecoder(f)
	err = decoder.Decode(cfg)
	if err != nil {
		fmt.Println(err)
		panic(err)
	}
}

func countDNABases(strand string) map[string]int {
	bMap := map[string]int{
		"A": 0,
		"C": 0,
		"G": 0,
		"T": 0,
	}
	for _, base := range strand {
		switch string(base) {

		case "A":
			bMap["A"] += 1
		case "C":
			bMap["C"] += 1
		case "G":
			bMap["G"] += 1
		case "T":
			bMap["T"] += 1
		}
	}
	//	fmt.Print(baseMaps)
	return bMap
}

func transDNAToRNA(strand string) string {
	outString := ""
	for _, base := range strand {
		switch string(base) {
		case "T":
			outString = outString + "U"
		default:
			outString = outString + string(base)
		}
	}
	return outString
}

func reverse(value string) string {
	data := []rune(value)
	result := []rune{}

	// Add runes in reverse order.
	for i := len(data) - 1; i >= 0; i-- {
		result = append(result, data[i])
	}

	// Return new string.
	return string(result)
}

func reverse2(inString string) string {
	outString := ""
	for _, base := range inString {
		outString = string(base) + outString
	}
	return outString
}

func reverseCompliment(strand string) string {
	var revStrand = reverse2(strand)
	outStrand := ""
	for _, base := range revStrand {
		switch string(base) {

		case "A":
			outStrand = outStrand + "T"
		case "C":
			outStrand = outStrand + "G"
		case "G":
			outStrand = outStrand + "C"
		case "T":
			outStrand = outStrand + "A"
		}
	}
	return outStrand
}

func stringMatch(tosearch string, subtosearch string) []int {
	var outList []int
	r, _ := rubex.Compile(subtosearch)
	m := r.FindAllStringSubmatchIndex(tosearch, -1)
	for _, x := range m {
		//		fmt.Printf("%d ", x[1])
		outList = append(outList, x[1])
	}
	return outList
}

func splitFASTA(strands string) map[string]string {
	fastaMap := make(map[string]string)
	splitstrands := strings.Split(strands, ">")
	for _, s := range splitstrands {
		if s != "" {
			s = strings.Replace(s, "\n", " ", 1)
			s = strings.Replace(s, "\n", "", -1)
			sarr := strings.Split(s, " ")
			fastaMap[sarr[0]] = sarr[len(sarr)-1]
		}
	}
	return fastaMap
}

func gcContent(inputstring string) string {
	var gcMap = splitFASTA(inputstring)
	resMap := make(map[string]float64)
	outMap := make(map[string]float64) //TODO Pair struct
	outval := float64(0)               // make an interface for percentages i.e. entry.perc()
	outStr := ""
	for k, strand := range gcMap {
		gcCount := 0
		for _, base := range strand {
			switch string(base) {
			case "C", "G":
				gcCount++
			}
		}
		resMap[k] = (float64(gcCount) / float64(len(strand)) * 100)
	}
	for k, v := range resMap {
		if v > outval {
			outval = v
			outMap[k] = v
		}
	}
	for k, v := range outMap {
		outStr = fmt.Sprintf("%s\n%f", k, v)
	}
	return outStr
}

func hammingCount(inputstring string) int {
	hamm := 0
	rawPair := strings.Split(inputstring, "\n")
	for k, _ := range rawPair[0] {
		if rawPair[0][k] != rawPair[1][k] {
			hamm++
		}
	}
	return hamm
}

func rnaToProtein(rs string) string {
	var ps []string
	r, _ := rubex.Compile(".{3}")
	m := r.FindAllStringSubmatch(rs, -1)
	for _, trip := range m {
		switch string(trip[0]) {
		case "GCU", "GCC", "GCA", "GCG":
			ps = append(ps, "A")
		case "UGU", "UGC":
			ps = append(ps, "C")
		case "GAU", "GAC":
			ps = append(ps, "D")
		case "GAA", "GAG":
			ps = append(ps, "E")
		case "UUU", "UUC":
			ps = append(ps, "F")
		case "GGU", "GGC", "GGA", "GGG":
			ps = append(ps, "G")
		case "CAU", "CAC":
			ps = append(ps, "H")
		case "AUU", "AUC", "AUA":
			ps = append(ps, "I")
		case "AAA", "AAG":
			ps = append(ps, "K")
		case "UUA", "UUG", "CUU", "CUC", "CUA", "CUG":
			ps = append(ps, "L")
		case "AUG":
			ps = append(ps, "M")
		case "AAU", "AAC":
			ps = append(ps, "N")
		case "CCU", "CCC", "CCA", "CCG":
			ps = append(ps, "P")
		case "CAA", "CAG":
			ps = append(ps, "Q")
		case "AGA", "AGG", "CGU", "CGC", "CGA", "CGG":
			ps = append(ps, "R")
		case "UCU", "UCC", "UCA", "UCG", "AGU", "AGC":
			ps = append(ps, "S")
		case "ACU", "ACC", "ACA", "ACG":
			ps = append(ps, "T")
		case "GUU", "GUC", "GUA", "GUG":
			ps = append(ps, "V")
		case "UGG":
			ps = append(ps, "W")
		case "UAU", "UAC":
			ps = append(ps, "Y")
		case "UAA", "UAG", "UGA":
			//"Stop"
			break
		}
	}
	return strings.Join(ps, "")
}

func proteinMass(inString string) float64 {
	total := float64(0)
	massTable := map[string]float64{
		"A": 71.03711,
		"C": 103.00919,
		"D": 115.02694,
		"E": 129.04259,
		"F": 147.06841,
		"G": 57.02146,
		"H": 137.05891,
		"I": 113.08406,
		"K": 128.09496,
		"L": 113.08406,
		"M": 131.04049,
		"N": 114.04293,
		"P": 97.05276,
		"Q": 128.05858,
		"R": 156.10111,
		"S": 87.03203,
		"T": 101.04768,
		"V": 99.06841,
		"W": 186.07931,
		"Y": 163.06333,
	}
	for _, x := range inString {
		total = total + massTable[string(x)]
	}
	//fmt.Println(total)
	return total
}

func fibSeq(gen int, off int) int {
	i := 1
	j := 1
	t := 0 // Total this generation

	g := gen // Generations
	o := off // Offspring per generation
	for x := 0; x < g; x++ {
		t = j
		j, i = i/2, i+(t*o)
		fmt.Println(t)
	}
	return t
}

func fibSeqMort(gen int, off int) int {
	i := 1
	j := 1
	t := 0 // Total this generation

	g := gen // Generations
	o := off // Offspring per generation
	for x := 0; x < g; x++ {
		t = j
		j, i = i, i+(t*o)
		fmt.Println(t)
	}
	return t
}
func main() {
	var config Config
	readCfgFile(&config)
	//	fmt.Printf("%+v", config)

	//Count DNA Bases
	for _, v := range countDNABases(config.DNA) {
		fmt.Printf("%d ", v)
	}
	fmt.Println()

	//Transcribe DNA to RNA
	fmt.Println(transDNAToRNA(config.DNARNA))

	// Reverse Compliment
	fmt.Println(reverseCompliment(config.Rcom))

	fmt.Println()
	for _, v := range stringMatch(config.Tosearch, config.Subtosearch) {
		fmt.Printf("%d ", v)
	}
	fmt.Println()

	// Calculate GC Content
	//fmt.Println(gcContent(config.Gcstrands))
	//fmt.Println(hammingCount(config.HammingPair))
	//fmt.Println(rnaToProtein(config.DNAToProtein))
	//fmt.Println(proteinMass("SKADYEK"))
	fmt.Println(fibSeq(6, 3))
}
