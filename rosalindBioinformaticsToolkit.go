package main

import (
	"fmt"
	"github.com/moovweb/rubex"
)

var DNA = "AGCGGGATTCATTTCATAACACGAAGGCTTATCTAAACGAGAGCGGTCCGGCTAAAGTTTGACAACCCGCATGGGGTAAGGTGTACGTAGGTCATATCCTAAATAAACTCATCTAGTCTGAAGACGTGTACCAGTGAAGTGGACGCAATACCCCAGTGATGGAATCAAACTTGTAGCTGCGCTGAGTATTTAGGCGCCGAAAATGCATGATACTTTGTAGCAGAAAAGGCAAAGAATAAAGATTTCTCTCCCGTCCGAGGAGGTTAAATATATATGTTGAGGGGATGATTGAAATTCAAAGATCTATCCCTAACACCAGTGTTCGACACTCACGATTCGCCCAGCTTGAAGCAAAACCGCGACCACGTTGGCCCATACACGAGTTCAGACAGCAGGACGCGGTGGTCTACCCAGCACAGCGTATCCCGTTGGAAGCACAAGATCCTCTGCTCTGTCTGGAGTCTTGTGGACCCAAAGAAGGTATACTGACTCTAAGCAGTCGTGTGGTAGTCTACTGGTATGATATTTGTAGAGTCGGAACTTTGATCTCTTTCTGCTCTTTGTAGTCGATTTCACCCGGACCGCTTTGGGAACTACCTCGGTGAGGAGTTGACGTGGCCCGACGCGCACTCACGCTTGTTGTTGGCATTGTGCTCTCAATTCTGTTTCAGTCCTGGTGCCGCTGCCGTTACTAACTAGATCCTGGATACCGCTAATCCCGACATCAACTTCGTGGACTTTTTTAATAACCACAGGTCGCGAATTGCGTACGCTCCATGCGGGCACCATATAGCCGACGCGGGAGGTTCTGAGTCTGGCTGTCAAT"
var DNARNA = "GCCTTTAGACGGGGCAGTCCATGGAGAGAACCTCATGCTGTGCAGGAAGCGAAAAGCGAGTGACTGGCCGTAGTGCGTAAACGCGGGCAATAGCAGCCCGCCCCCCCTGGGAATTTCACTGTTATATCAACAGGCAATCCATTAACGCCTGCTCCTTGATGTCATCAAACCTCCTGATAACTGAGCCGGCAGAAGTAGTTAGTTTACGACAAAGGAGGGACGCGGAATCACGCGGCAGTATGGTGGAACATCCCGCCAATCTTGTTCACGGTAGATGTCCTAAGTTCAAGTCGCGCGGCTCGCCCGACCTTTCGTGTGGTCGGGGTGCAAATACCACCGTAGTAATTCAAGTCGGTTGCGATCCGGCTCTCGCCACGTTAACACCCGAGGTCGTCACGGGTGCTCGGCCGCACAACACTAAACGGTACCGATAATGTGACAAATGGTATAAAATCGGTGGATTTCCTAAGGCCAAGTAAGTGCCGACTTTGTACGGGTTAATTCGGCGATAATTATTTTCTAAAATGACGAACGAAGCCAGAGCCACTAATCTATTCGCGGTCAAATAAATGAGTAATTCTGTAGCGGTGTAGCTTGGTTGCTGTGCACCGAATCGTATTAGCTTAAGCCCAGTATGACATTCCAGGCAGGAATGTTAGGGATGAGGATTCGACTTGACGCGCCCAGCCTCTCTTTGGGATGGATATGTCACACATAGGGATCGTTTCGATGTGAAACAGTAAGTCCGAGGAAATTTCGGAGCGATGAGGGCTTGATAGTCGATTTCGATATCGCATTAGTGTTTAATGGTGCGTTGTTTATATCGCAACTTGACGGGAACTTAGCCCGCATCGTGTCCATAACCATCCGGTGATCGTGCCACACGACGCCTACTCTCGTAGGCTGGCAGTTAAATGGCGTCTGTTTC"
var rcom = "TGCGCTAGTAACGCCATTGAGAAGTTATTGCTTTGGAACTTTCCAGCTCCCTGCGATCATGTCGATTCGAATCGCACGCTTACCCACCAATGGATGTTCAGCAGCTAACTCAAACAAGTGACCGCTTGAGTATAACAGCTACATTCAATCCTCGTCTACGGCGCGCGGCAATTTATTCCTAGGTTCCTCCCCCAGACCACCAGTTAGCTCATCCTTCAAACGTACCGCTGTTGTATTTCTCTTAGAGACTTAGCCTGAGTCAAGCTACTCCTATACAGCTTCTTGCAGCCACAGGACCAAGCCCAGATGATGTTTGCACACAACTATGTGCGTGGCACTTGCTGCTCCAATAAAGCCTGACTGAAAAAGTCCTACAGGAACCGAGGATATACCCATTACCCGAGATCATAGACCCTCGAGCCTAACGCGTGCGTCATAATGTTCGTTCCGTCCTCGTGTCGTACGAAAGATCTGGCCGCGCCCCAACTCTCGTTGCTGAAGTCCGGGCCCCATAAGTAGGTACTTGTTCGCTGAGACTTTGCTGCAGCGATTAAGCCTTGAGGACCGTTGCTCCCCGCAAACCTCGCACTCATACGCTGACATGGTGGCCCCCAGGGCGGCGAGGGCTGCTGCACCGTCACTCATCAATCTACTGTCACGATTCAAGGCAGCAAGACGTTTCCAATTGAACGGTGTTTTCAATGTGCTGGGGGTTCGCGAATCTTGCCAGACGTTAAGCACTTTCCTGGTTATAGTCCAATCATATGCTTTCGTCCGGCGCGTTTGGCTGATCCGGCAGGCCCCTATAGGGTCCGCTTGCAGGACGATGCCGGACAAATGGGCACGTGGAGGAGAGCGACCAAATTTACTCCAAAAGAGTCTCGGCGGAGGATTGAGCAATTATGAGGCCTGCACAATCTTCTGCCAGCCTGGG"
var tosearch = "TGCCTTCCGCCAGATGCCAGATGCCAGATTCTCCCGCCAGATGGCCAGATTATGCCAGATGGCCAGATCAGCCAGATGCCAGATTAAGCCAGATGCCAGATGAAAGCCAGATCAACCCTGCCAGATACGGCCAGATGGCCAGATCGAGCCAGATGCGCCAGATGTAGTGATGCCAGATGCTTGAAGAGGCCAGATCGCCAGATAGCCAGATGAGTGAGCGGCAGCCAGATGCCAGATGGCCAGATATCGGCCAGATAGGCCAGATAAGCCAGATTCTCTGCCAGATTGGCCAGATGCCAGATTACGCCAGATTTGCCAGATCGCCAGATAACTCAGCCAGGGCCAGATAGCCAGATGACGCCAGATGCCAGATTTGCCAGATGGCCAGATCCTAGCCAGATGCATGGCCAGATTGCCAGATGCCAGATTAGCCAGATTGCCAGATCTGCCAGATCGCCAGATAAGGCCAGATTGAACCTGGCCAGATGCCAGATGGTCCGGCCAGATTGGCCAGATAGTGTGGCCAGATCGCCAGATATGGGGCCAGATTTATGCCAGATGTGCCAGATTCGTAGCCAGATCGATGCCAGATTAGGGCCAGATAATTGCCAGATCTCTAGGCCAGATCTGGCCAGATCCGCCAGATGTTGTGGGTATTTAATTGCCAGATGCCAGATGCCTGCCAGATAGCCAGATGCCAGATGCCAGATTAGCCAGATGCCAGATTCGCCAGATGCCAGATGCCAGATGCCAGATGCCAGATCTACTGGCCAGATCCTGCCAGATCTGCCAGATCGCCAGATTGGCCAGATGCCAGATAGCCAGATCGCGGAGCGCCAGATGGCCAGATAAGATTCGCCAGATGCCAGATCGCCAGATTGGCCAGATAGGAAACGCCAGATGCCAGATGGCCAGATCTGCCAGATGGCCAGATCAATAGGCCAGATGCCAGATGCGCCAGATC"
var subtosearch = "G(?=CCAGATGC)"

func countDNABases(strand string) map[string]int {
	var basesMap = map[string]int{
		"A": 0,
		"C": 0,
		"G": 0,
		"T": 0,
	}
	for _, base := range strand {
		switch string(base) {

		case "A":
			basesMap["A"] += 1
		case "C":
			basesMap["C"] += 1
		case "G":
			basesMap["G"] += 1
		case "T":
			basesMap["T"] += 1
		}
	}
	//	fmt.Print(baseMaps)
	return basesMap
}

func transDNAToRNA(strand string) string {
	outString := ""
	for _, base := range strand {
		switch string(base) {
		case "T":
			outString = outString + "U"
		default:
			outString = outString + string(base)
		}
	}
	return outString
}

func reverse(value string) string {
	data := []rune(value)
	result := []rune{}

	// Add runes in reverse order.
	for i := len(data) - 1; i >= 0; i-- {
		result = append(result, data[i])
	}

	// Return new string.
	return string(result)
}

func reverse2(inString string) string {
	var outString = ""
	for _, base := range inString {
		outString = string(base) + outString
	}
	return outString
}

func reverseCompliment(strand string) string {
	var revStrand = reverse2(strand)
	var outStrand = ""
	for _, base := range revStrand {
		switch string(base) {

		case "A":
			outStrand = outStrand + "T"
		case "C":
			outStrand = outStrand + "G"
		case "G":
			outStrand = outStrand + "C"
		case "T":
			outStrand = outStrand + "A"
		}
	}
	return outStrand
}

func stringMatch() {
	r, _ := rubex.Compile(subtosearch)
	m := r.FindAllStringSubmatchIndex(tosearch, -1)
	for _, x := range m {
		fmt.Printf("%d ", x[1])
	}
}

func main() {

	//Count DNA Bases
	//	for _, v := range countDNABases(DNA) {
	//		fmt.Printf("%d ", v)
	//	}
	fmt.Println()

	//Transcribe DNA to RNA
	//	fmt.Println(transDNAToRNA(DNARNA))
	fmt.Println()

	// Reverse Compliment
	//	fmt.Println(reverseCompliment(rcom))
	//	fmt.Println()

	stringMatch()

}
